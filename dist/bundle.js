(()=>{"use strict";var t={169:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(15),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"#mainContainer{max-width:800px;margin:auto;margin-bottom:100px}#mainContainer>.loginContainer{text-align:center;margin-top:100px}#mainContainer>.main{text-align:center;margin-top:30px}#mainContainer>.main .loggedInMessage{font-size:13px}#mainContainer .derby-msg{margin-top:50px}#mainContainer .errorMessage{color:red}.w-100{width:100%}.submissions-table{margin-top:50px;margin-bottom:50px;width:100%}.submissions-table th.quiz-select{font-size:8px;font-weight:normal;cursor:pointer}.submissions-table td{cursor:pointer}.submissions-table td.kerb-select{width:1%;white-space:nowrap;padding:2px 6px;text-align:left}.submissions-table td.submitted{background-color:#0b0}.submissions-table td.not-submitted{background-color:#ddd}.plain-table{margin-top:50px;margin-bottom:50px;margin-left:auto;margin-right:auto}.plain-table th{padding:2px 10px}.plain-table td{padding:2px 15px}.plain-table td.row-label{text-align:left;font-weight:bold}.main-nav{display:flex;padding:0px 150px;margin-top:20px}.main-nav>a{flex-grow:1;text-decoration:none;font-weight:bold;color:blue}b,th{color:#444}","",{version:3,sources:["webpack://./src/main.scss"],names:[],mappings:"AAAA,eACC,eAAA,CACA,WAAA,CACA,mBAAA,CAEA,+BACC,iBAAA,CACA,gBAAA,CAED,qBACC,iBAAA,CACA,eAAA,CAEA,sCACC,cAAA,CAGF,0BACC,eAAA,CAED,6BACC,SAAA,CAIF,OACC,UAAA,CAGD,mBACC,eAAA,CACA,kBAAA,CACA,UAAA,CAGC,kCACC,aAAA,CACA,kBAAA,CACA,cAAA,CAIF,sBACC,cAAA,CAEA,kCACC,QAAA,CACA,kBAAA,CACA,eAAA,CACA,eAAA,CAED,gCACC,qBAAA,CAED,oCACC,qBAAA,CAKH,aACC,eAAA,CACA,kBAAA,CACA,gBAAA,CACA,iBAAA,CAEA,gBACC,gBAAA,CAGD,gBACC,gBAAA,CACA,0BACC,eAAA,CACA,gBAAA,CAOH,UACC,YAAA,CACA,iBAAA,CACA,eAAA,CAEA,YACC,WAAA,CACA,oBAAA,CACA,gBAAA,CACA,UAAA,CAIF,KACC,UAAA",sourcesContent:["#mainContainer {\n\tmax-width: 800px;\n\tmargin: auto;\n\tmargin-bottom: 100px;\n\n\t> .loginContainer {\n\t\ttext-align: center;\n\t\tmargin-top: 100px;\n\t}\n\t> .main {\n\t\ttext-align: center;\n\t\tmargin-top: 30px;\n\n\t\t.loggedInMessage {\n\t\t\tfont-size: 13px;\n\t\t}\n\t}\n\t.derby-msg {\n\t\tmargin-top: 50px;\n\t}\n\t.errorMessage {\n\t\tcolor: red;\n\t}\n}\n\n.w-100 {\n\twidth: 100%;\n}\n\n.submissions-table {\n\tmargin-top: 50px;\n\tmargin-bottom: 50px;\n\twidth: 100%;\n\n\tth {\n\t\t&.quiz-select {\n\t\t\tfont-size: 8px;\n\t\t\tfont-weight: normal;\n\t\t\tcursor: pointer;\n\t\t}\n\t}\n\n\ttd {\n\t\tcursor: pointer;\n\n\t\t&.kerb-select {\n\t\t\twidth: 1%;\n\t\t\twhite-space: nowrap;\n\t\t\tpadding: 2px 6px;\n\t\t\ttext-align: left;\n\t\t}\n\t\t&.submitted {\n\t\t\tbackground-color: #0B0;\n\t\t}\n\t\t&.not-submitted {\n\t\t\tbackground-color: #DDD;\n\t\t}\n\t}\n}\n\n.plain-table {\n\tmargin-top: 50px;\n\tmargin-bottom: 50px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\n\tth {\n\t\tpadding: 2px 10px;\n\t}\n\n\ttd {\n\t\tpadding: 2px 15px;\n\t\t&.row-label {\n\t\t\ttext-align: left;\n\t\t\tfont-weight: bold;\n\t\t}\n\t\t&.score {\n\t\t}\n\t}\n}\n\n.main-nav {\n\tdisplay: flex;\n\tpadding: 0px 150px;\n\tmargin-top: 20px;\n\n\t> a {\n\t\tflex-grow: 1;\n\t\ttext-decoration: none;\n\t\tfont-weight: bold;\n\t\tcolor: blue;\n\t}\n}\n\nb, th {\n\tcolor: #444;\n}\n"],sourceRoot:""}]);const c=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(u," */"),s=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},379:(t,e,n)=>{var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function i(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],o=0;o<t.length;o++){var c=t[o],u=e.base?c[0]+e.base:c[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=i(s),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:h(p,e),references:1}),r.push(s)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var i=o(t.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,s=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=s(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}function p(t,e,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var y=null,d=0;function h(t,e){var n,r,o;if(e.singleton){var a=d++;n=y||(y=u(e)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=u(e),r=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var u=c(t,e),l=0;l<n.length;l++){var s=i(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=u}}}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{function t(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+t+(n.length?" "+n.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function e(t){return!!t&&!!t[q]}function r(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[Q]||!!t.constructor[Q]||u(t)||l(t))}function o(t,e,n){void 0===n&&(n=!1),0===a(t)?(n?Object.keys:K)(t).forEach((function(r){n&&"symbol"==typeof r||e(r,t[r],t)})):t.forEach((function(n,r){return e(r,n,t)}))}function a(t){var e=t[q];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:u(t)?2:l(t)?3:0}function i(t,e){return 2===a(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function c(t,e,n){var r=a(t);2===r?t.set(e,n):3===r?(t.delete(e),t.add(n)):t[e]=n}function u(t){return z&&t instanceof Map}function l(t){return M&&t instanceof Set}function s(t){return t.o||t.t}function f(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=U(t);delete e[q];for(var n=K(e),r=0;r<n.length;r++){var o=n[r],a=e[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(e[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:t[o]})}return Object.create(Object.getPrototypeOf(t),e)}function p(t,n){return void 0===n&&(n=!1),d(t)||e(t)||!r(t)||(a(t)>1&&(t.set=t.add=t.clear=t.delete=y),Object.freeze(t),n&&o(t,(function(t,e){return p(e,!0)}),!0)),t}function y(){t(2)}function d(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function h(e){var n=W[e];return n||t(18,e),n}function m(){return N}function b(t,e){e&&(h("Patches"),t.u=[],t.s=[],t.v=e)}function v(t){g(t),t.p.forEach(w),t.p=null}function g(t){t===N&&(N=t.l)}function A(t){return N={p:[],l:N,h:t,m:!0,_:0}}function w(t){var e=t[q];0===e.i||1===e.i?e.j():e.g=!0}function C(e,n){n._=n.p.length;var o=n.p[0],a=void 0!==e&&e!==o;return n.h.O||h("ES5").S(n,e,a),a?(o[q].P&&(v(n),t(4)),r(e)&&(e=R(n,e),n.l||S(n,e)),n.u&&h("Patches").M(o[q],e,n.u,n.s)):e=R(n,o,[]),v(n),n.u&&n.v(n.u,n.s),e!==B?e:void 0}function R(t,e,n){if(d(e))return e;var r=e[q];if(!r)return o(e,(function(o,a){return E(t,r,e,o,a,n)}),!0),e;if(r.A!==t)return e;if(!r.P)return S(t,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var a=4===r.i||5===r.i?r.o=f(r.k):r.o;o(3===r.i?new Set(a):a,(function(e,o){return E(t,r,a,e,o,n)})),S(t,a,!1),n&&t.u&&h("Patches").R(r,n,t.u,t.s)}return r.o}function E(t,n,o,a,u,l){if(e(u)){var s=R(t,u,l&&n&&3!==n.i&&!i(n.D,a)?l.concat(a):void 0);if(c(o,a,s),!e(s))return;t.m=!1}if(r(u)&&!d(u)){if(!t.h.N&&t._<1)return;R(t,u),n&&n.A.l||S(t,u)}}function S(t,e,n){void 0===n&&(n=!1),t.h.N&&t.m&&p(e,n)}function O(t,e){var n=t[q];return(n?s(n):t)[e]}function x(t,e){if(e in t)for(var n=Object.getPrototypeOf(t);n;){var r=Object.getOwnPropertyDescriptor(n,e);if(r)return r;n=Object.getPrototypeOf(n)}}function j(t){t.P||(t.P=!0,t.l&&j(t.l))}function k(t){t.o||(t.o=f(t.t))}function P(t,e,n){var r=u(e)?h("MapSet").T(e,n):l(e)?h("MapSet").F(e,n):t.O?function(t,e){var n=Array.isArray(t),r={i:n?1:0,A:e?e.A:m(),P:!1,I:!1,D:{},l:e,t,k:null,o:null,j:null,C:!1},o=r,a=L;n&&(o=[r],a=$);var i=Proxy.revocable(o,a),c=i.revoke,u=i.proxy;return r.k=u,r.j=c,u}(e,n):h("ES5").J(e,n);return(n?n.A:m()).p.push(r),r}function I(n){return e(n)||t(22,n),function t(e){if(!r(e))return e;var n,i=e[q],u=a(e);if(i){if(!i.P&&(i.i<4||!h("ES5").K(i)))return i.t;i.I=!0,n=_(e,u),i.I=!1}else n=_(e,u);return o(n,(function(e,r){i&&function(t,e){return 2===a(t)?t.get(e):t[e]}(i.t,e)===r||c(n,e,t(r))})),3===u?new Set(n):n}(n)}function _(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return f(t)}var T,N,D="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),z="undefined"!=typeof Map,M="undefined"!=typeof Set,F="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,B=D?Symbol.for("immer-nothing"):((T={})["immer-nothing"]=!0,T),Q=D?Symbol.for("immer-draftable"):"__$immer_draftable",q=D?Symbol.for("immer-state"):"__$immer_state",K=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames),U=Object.getOwnPropertyDescriptors||function(t){var e={};return K(t).forEach((function(n){e[n]=Object.getOwnPropertyDescriptor(t,n)})),e},W={},L={get:function(t,e){if(e===q)return t;var n=s(t);if(!i(n,e))return function(t,e,n){var r,o=x(e,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(t.k):void 0}(t,n,e);var o=n[e];return t.I||!r(o)?o:o===O(t.t,e)?(k(t),t.o[e]=P(t.A.h,o,t)):o},has:function(t,e){return e in s(t)},ownKeys:function(t){return Reflect.ownKeys(s(t))},set:function(t,e,n){var r=x(s(t),e);if(null==r?void 0:r.set)return r.set.call(t.k,n),!0;if(!t.P){var o=O(s(t),e),a=null==o?void 0:o[q];if(a&&a.t===n)return t.o[e]=n,t.D[e]=!1,!0;if(function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}(n,o)&&(void 0!==n||i(t.t,e)))return!0;k(t),j(t)}return t.o[e]=n,t.D[e]=!0,!0},deleteProperty:function(t,e){return void 0!==O(t.t,e)||e in t.t?(t.D[e]=!1,k(t),j(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var n=s(t),r=Reflect.getOwnPropertyDescriptor(n,e);return r?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:r.enumerable,value:n[e]}:r},defineProperty:function(){t(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){t(12)}},$={};o(L,(function(t,e){$[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),$.deleteProperty=function(t,e){return L.deleteProperty.call(this,t[0],e)},$.set=function(t,e,n){return L.set.call(this,t[0],e,n,t[0])};var H=new(function(){function n(t){this.O=F,this.N=!0,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=n.prototype;return o.produce=function(e,n,o){if("function"==typeof e&&"function"!=typeof n){var a=n;n=e;var i=this;return function(t){var e=this;void 0===t&&(t=a);for(var r=arguments.length,o=Array(r>1?r-1:0),c=1;c<r;c++)o[c-1]=arguments[c];return i.produce(t,(function(t){var r;return(r=n).call.apply(r,[e,t].concat(o))}))}}var c;if("function"!=typeof n&&t(6),void 0!==o&&"function"!=typeof o&&t(7),r(e)){var u=A(this),l=P(this,e,void 0),s=!0;try{c=n(l),s=!1}finally{s?v(u):g(u)}return"undefined"!=typeof Promise&&c instanceof Promise?c.then((function(t){return b(u,o),C(t,u)}),(function(t){throw v(u),t})):(b(u,o),C(c,u))}if(!e||"object"!=typeof e){if((c=n(e))===B)return;return void 0===c&&(c=e),this.N&&p(c,!0),c}t(21,e)},o.produceWithPatches=function(t,e){var n,r,o=this;return"function"==typeof t?function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return o.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(r))}))}:[this.produce(t,e,(function(t,e){n=t,r=e})),n,r]},o.createDraft=function(n){r(n)||t(8),e(n)&&(n=I(n));var o=A(this),a=P(this,n,void 0);return a[q].C=!0,g(o),a},o.finishDraft=function(t,e){var n=(t&&t[q]).A;return b(n,e),C(void 0,n)},o.setAutoFreeze=function(t){this.N=t},o.setUseProxies=function(e){e&&!F&&t(20),this.O=e},o.applyPatches=function(t,n){var r;for(r=n.length-1;r>=0;r--){var o=n[r];if(0===o.path.length&&"replace"===o.op){t=o.value;break}}var a=h("Patches").$;return e(t)?a(t,n):this.produce(t,(function(t){return a(t,n.slice(r+1))}))},n}()),J=H.produce;H.produceWithPatches.bind(H),H.setAutoFreeze.bind(H),H.setUseProxies.bind(H),H.applyPatches.bind(H),H.createDraft.bind(H),H.finishDraft.bind(H);const V=J;class G{constructor(t,e,n){this.endpoint=`wss://${t}/ws`,this.ws=null,this.onOpen=e,this.onMessage=n,this.pingTimer=setInterval(this.ping.bind(this),5e3)}init(){this.ws=new WebSocket(this.endpoint),this.ws.onopen=t=>{this.onOpen()},this.ws.onmessage=t=>{const e=JSON.parse(t.data);this.onMessage(e)},this.ws.onclose=t=>{console.log("websocket closed"),this.init()}}send(t){this.ws.send(JSON.stringify(t))}ping(){null!=this.ws&&this.ws.readyState==WebSocket.OPEN&&this.send({type:"ping"})}}class X{constructor(t){this.endpoint=`https://${t}`}doApiCall(t,e,n,r,o){const a=new XMLHttpRequest;a?(a.onreadystatechange=()=>{if(a.readyState!=XMLHttpRequest.DONE)return;if(""==a.responseText)return void o("server not responding, please try again in a few minutes");const t=JSON.parse(a.responseText).m;200==a.status?r(t):o(t)},a.open(t,`${this.endpoint}${e}`,!0),a.setRequestHeader("Content-Type","application/json"),a.withCredentials=!0,a.send(JSON.stringify(n))):o("xhr unsupported, please use a modern browser")}login(t,e,n){this.doApiCall("POST","/login",{token:t},e,n)}}function Z(t){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function tt(t,e){return(tt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function et(t,e){return!e||"object"!==Z(e)&&"function"!=typeof e?nt(t):e}function nt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function rt(t){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ot(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var at=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&tt(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=rt(r);if(o){var n=rt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return et(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),ot(nt(e=a.call(this,t)),"focusTokenInput",(function(){null!=e.tokenInput&&e.tokenInput.focus()})),ot(nt(e),"doLogin",(function(t){e.setState(V((function(t){t.waitingForServer=!0}))),e.apiManager.login(t,(function(){localStorage.setItem("token",t),e.setState(V((function(t){t.tokenInputValue="",t.loginError=""}))),e.props.onLoginSuccess(t)}),(function(t){e.setState(V((function(e){e.waitingForServer=!1,e.tokenInputValue="",e.loginError=t})))}))})),ot(nt(e),"handleChangeToken",(function(t){e.setState(V((function(e){e.tokenInputValue=t.target.value})))})),ot(nt(e),"handleSubmitToken",(function(t){t.preventDefault(),e.doLogin(e.state.tokenInputValue.trim())})),e.tokenInput=null,e.apiManager=new X(e.props.serverDomain),e.state={waitingForServer:!1,tokenInputValue:"",loginError:""},e}return e=i,(n=[{key:"componentDidMount",value:function(){this.focusTokenInput();var t=localStorage.getItem("token");null!=t&&this.doLogin(t)}},{key:"componentDidUpdate",value:function(){this.focusTokenInput()}},{key:"render",value:function(){var t=this;return this.state.waitingForServer?React.createElement("div",{className:"loginContainer"},"Authenticating..."):React.createElement("div",{className:"loginContainer"},React.createElement("form",{onSubmit:this.handleSubmitToken},React.createElement("div",{style:{marginBottom:"10px"}},"Enter API token"),React.createElement("div",null,React.createElement("input",{onChange:this.handleChangeToken,ref:function(e){t.tokenInput=e}}),React.createElement("button",{type:"submit"},"Enter")),React.createElement("div",{className:"errorMessage"},this.state.loginError)))}}])&&Y(e.prototype,n),i}();function it(t){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ct(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(t,e)||ut(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ut(t,e){if(t){if("string"==typeof t)return lt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?lt(t,e):void 0}}function lt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function st(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ft(t,e){return(ft=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function pt(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?yt(t):e}function yt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function dt(t){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ht=["Quizzes","Tests","Derby"],mt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ft(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=dt(r);if(o){var n=dt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return pt(this,t)});function i(t){var e,n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o=function(t){return function(n){n.preventDefault(),e.props.onNavClick(t)}},(r="getHandleClick")in(n=yt(e=a.call(this,t)))?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,e}return e=i,(n=[{key:"render",value:function(){var t,e=[],n=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=ut(t))){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(ht.entries());try{for(n.s();!(t=n.n()).done;){var r=ct(t.value,2),o=r[0],a=r[1];if(2!=o||this.props.phase5Enabled){var i=this.props.navIndex==o;e.push(React.createElement("a",{href:"#",key:o,onClick:this.getHandleClick(o)},i?"[":null,a,i?"]":null))}}}catch(t){n.e(t)}finally{n.f()}return React.createElement("nav",{className:"main-nav"},e)}}])&&st(e.prototype,n),i}();function bt(t){return(bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(t,e)||wt(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gt(t){return function(t){if(Array.isArray(t))return Ct(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||wt(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function At(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=wt(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function wt(t,e){if(t){if("string"==typeof t)return Ct(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ct(t,e):void 0}}function Ct(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Rt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Et(t,e){return(Et=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function St(t,e){return!e||"object"!==bt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ot(t){return(Ot=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var xt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Et(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ot(r);if(o){var n=Ot(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return St(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).state={shownFiles:[]},e}return e=i,(n=[{key:"getQuizFilesTable",value:function(){var t,e=[],n=At(this.props.allKerbs);try{for(n.s();!(t=n.n()).done;){t.value;for(var r=[],o=0;o<this.props.numMiniquizzes;o++)r.push([]);e.push(r)}}catch(t){n.e(t)}finally{n.f()}var a,i=At(this.props.quizFiles);try{for(i.s();!(a=i.n()).done;){var c=a.value,u=c[1].split(".")[0],l=parseInt(u.slice(2));e[this.props.allKerbs.indexOf(c[0])][l].push(c)}}catch(t){i.e(t)}finally{i.f()}return e}},{key:"handleKerbClick",value:function(t){var e=this,n=this.getQuizFilesTable();this.setState(V((function(r){r.shownFiles=[];var o,a=e.props.allKerbs.indexOf(t),i=At(n[a]);try{for(i.s();!(o=i.n()).done;){var c,u=o.value;(c=r.shownFiles).push.apply(c,gt(u))}}catch(t){i.e(t)}finally{i.f()}})))}},{key:"handleCellClick",value:function(t,e){var n=this,r=this.getQuizFilesTable();this.setState(V((function(o){var a=n.props.allKerbs.indexOf(t);o.shownFiles=r[a][e]})))}},{key:"handleQuizNumClick",value:function(t){var e=this.getQuizFilesTable();this.setState(V((function(n){n.shownFiles=[];var r,o=At(e.entries());try{for(o.s();!(r=o.n()).done;){var a,i=vt(r.value,2),c=(i[0],i[1]);(a=n.shownFiles).push.apply(a,gt(c[t]))}}catch(t){o.e(t)}finally{o.f()}})))}},{key:"render",value:function(){var t,e=this,n=this.getQuizFilesTable(),r=[],o=At(n.entries());try{var a=function(){var n,o=vt(t.value,2),a=o[0],i=o[1],c=e.props.allKerbs[a],u=[],l=At(i.entries());try{var s=function(){var t=vt(n.value,2),r=t[0],o=t[1].length>0?"submitted":"not-submitted";u.push(React.createElement("td",{key:r,className:o,onClick:function(){e.handleCellClick(c,r)}}))};for(l.s();!(n=l.n()).done;)s()}catch(t){l.e(t)}finally{l.f()}r.push(React.createElement("tr",{key:c},React.createElement("td",{onClick:function(){e.handleKerbClick(c)},className:"kerb-select"},c),u,React.createElement("td",null,React.createElement("a",{href:"https://github.com/6035/".concat(c,"-quizzes")},"Repo"))))};for(o.s();!(t=o.n()).done;)a()}catch(t){o.e(t)}finally{o.f()}for(var i=[React.createElement("th",{key:-1})],c=function(t){i.push(React.createElement("th",{key:t,className:"quiz-select",onClick:function(){e.handleQuizNumClick(t)}},t.toString().padStart(2,"0")))},u=0;u<this.props.numMiniquizzes;u++)c(u);var l,s=[],f=["jpeg","jpg","bmp","png","gif","svg","tif","tiff","webp"],p=At(this.state.shownFiles);try{for(p.s();!(l=p.n()).done;){var y,d=l.value,h="".concat(d[0],"/").concat(d[1]),m="https://".concat(this.props.serverDomain,"/quiz/").concat(h),b=d[1].split(".").pop();y=f.includes(b)?React.createElement("img",{className:"w-100",src:m,crossOrigin:"use-credentials"}):"pdf"==b?React.createElement("object",{className:"w-100",height:"800",data:m,crossOrigin:"use-credentials",type:"application/pdf"}):React.createElement("embed",{className:"w-100",src:m,crossOrigin:"use-credentials"}),s.push(React.createElement("div",{key:h},React.createElement("div",null,h),y))}}catch(t){p.e(t)}finally{p.f()}return React.createElement("div",null,React.createElement("table",{className:"submissions-table"},React.createElement("thead",null,React.createElement("tr",null,i)),React.createElement("tbody",null,r)),React.createElement("div",null,s))}}])&&Rt(e.prototype,n),i}();function jt(t){return(jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function kt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(t,e)||It(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pt(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=It(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function It(t,e){if(t){if("string"==typeof t)return _t(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_t(t,e):void 0}}function _t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Nt(t,e){return(Nt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Dt(t,e){return!e||"object"!==jt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function zt(t){return(zt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Mt=["scanner","parser"],Ft=["semantics","codegen","optimizer","derby"];function Bt(t){return null==t?"--":"".concat((100*t).toFixed(1),"%")}function Qt(t,e){return null==e?"--":"derby"==t?"".concat(e.toFixed(2),"x"):Bt(e)}var qt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Nt(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=zt(r);if(o){var n=zt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Dt(this,t)});function i(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),a.call(this,t)}return e=i,(n=[{key:"render",value:function(){var t,e=[],n=Pt(this.props.allKerbs);try{for(n.s();!(t=n.n()).done;){t.value;for(var r=[],o=0;o<Mt.length;o++)r.push(null);e.push(r)}}catch(t){n.e(t)}finally{n.f()}var a,i=[],c=Pt(this.props.allTeams);try{for(c.s();!(a=c.n()).done;){a.value;for(var u=[],l=0;l<Ft.length;l++)u.push(null);i.push(u)}}catch(t){c.e(t)}finally{c.f()}var s,f=this.props.allKerbs.map((function(t){return"".concat(t,"-phase1")})),p=Pt(this.props.testResults);try{for(p.s();!(s=p.n()).done;){var y=s.value,d=y.repo_name,h=f.indexOf(d);if(-1==h){var m=this.props.allTeams.indexOf(d);if(-1!=m){var b=Ft.indexOf(y.testset);i[m][b]=y.score}}else{var v=Mt.indexOf(y.testset);e[h][v]=y.score}}}catch(t){p.e(t)}finally{p.f()}var g,A=[React.createElement("th",{key:""})],w=Pt(Mt);try{for(w.s();!(g=w.n()).done;){var C=g.value;A.push(React.createElement("th",{key:C,className:"test-name"},C))}}catch(t){w.e(t)}finally{w.f()}var R,E=[React.createElement("th",{key:""})],S=Pt(Ft);try{for(S.s();!(R=S.n()).done;){var O=R.value;E.push(React.createElement("th",{key:O,className:"test-name"},O))}}catch(t){S.e(t)}finally{S.f()}var x,j=[],k=Pt(e.entries());try{for(k.s();!(x=k.n()).done;){var P,I=kt(x.value,2),_=I[0],T=I[1],N=this.props.allKerbs[_],D=[],z=Pt(T.entries());try{for(z.s();!(P=z.n()).done;){var M=kt(P.value,2),F=M[0],B=Bt(M[1]);D.push(React.createElement("td",{key:F,className:"score"},B))}}catch(t){z.e(t)}finally{z.f()}j.push(React.createElement("tr",{key:N},React.createElement("td",{className:"row-label"},N),D,React.createElement("td",null,React.createElement("a",{href:"https://github.com/6035/".concat(N,"-phase1")},"Repo"))))}}catch(t){k.e(t)}finally{k.f()}var Q,q=[],K=Pt(i.entries());try{for(K.s();!(Q=K.n()).done;){var U,W=kt(Q.value,2),L=W[0],$=W[1],H=this.props.allTeams[L],J=[],V=Pt($.entries());try{for(V.s();!(U=V.n()).done;){var G=kt(U.value,2),X=G[0],Z=G[1],Y=Qt(Ft[X],Z);J.push(React.createElement("td",{key:X,className:"score"},Y))}}catch(t){V.e(t)}finally{V.f()}q.push(React.createElement("tr",{key:H},React.createElement("td",{className:"row-label"},H),J,React.createElement("td",null,React.createElement("a",{href:"https://github.com/6035/".concat(H)},"Repo"))))}}catch(t){K.e(t)}finally{K.f()}var tt,et,nt=React.createElement("table",{className:"plain-table"},React.createElement("thead",null,React.createElement("tr",null,A)),React.createElement("tbody",null,j)),rt=0==q.length?null:React.createElement("table",{className:"plain-table"},React.createElement("thead",null,React.createElement("tr",null,E)),React.createElement("tbody",null,q)),ot=[],at=Pt(this.props.testResults);try{for(at.s();!(tt=at.n()).done;){var it=tt.value,ct=it.git_commit.slice(0,6),ut=Qt(it.testset,it.score);ot.push(React.createElement("tr",{key:it.id},React.createElement("td",null,it.repo_name),React.createElement("td",null,ct),React.createElement("td",null,it.testset),React.createElement("td",null,ut),React.createElement("td",null,(et=it.time_processed,new Date(1e3*et).toLocaleString())),React.createElement("td",null,it.message)))}}catch(t){at.e(t)}finally{at.f()}ot.reverse();var lt=0==ot.length?null:React.createElement("table",{className:"plain-table"},React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null,"Repo"),React.createElement("th",null,"Commit"),React.createElement("th",null,"Testset"),React.createElement("th",null,"Score"),React.createElement("th",null,"Time processed"),React.createElement("th",null,"Message"))),React.createElement("tbody",null,ot)),st=null;if(null!=this.props.teamName){var ft,pt=0,yt=Pt(this.props.webhooksLog);try{for(yt.s();!(ft=yt.n()).done;){var dt=ft.value;dt.repo_name==this.props.teamName&&(pt+=dt.time_used)}}catch(t){yt.e(t)}finally{yt.f()}st=React.createElement("div",null,"Total grader time used by team: ",React.createElement("b",null,Math.round(pt/1e3))," seconds")}var ht=React.createElement("span",null,"None");if(null!=this.props.testsQueuePending&&(null!=this.props.testsQueueCurrent||this.props.testsQueuePending.length>0)){var mt=(null==this.props.testsQueueCurrent?[]:[this.props.testsQueueCurrent]).concat(this.props.testsQueuePending);ht=[];for(var bt=0;bt<mt.length;bt++){0!=bt&&ht.push(React.createElement("span",{key:2*bt-1},", "));var vt=null!=this.props.testsQueueCurrent&&0==bt?"[".concat(mt[bt],"]"):"".concat(mt[bt]);ht.push(React.createElement("b",{key:2*bt},vt))}}return React.createElement("div",null,nt,rt,st,React.createElement("div",null,"Repositories in grading queue: ",ht),lt)}}])&&Tt(e.prototype,n),i}();function Kt(t){return(Kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ut(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(t,e)||Wt(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wt(t,e){if(t){if("string"==typeof t)return Lt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lt(t,e):void 0}}function Lt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function $t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ht(t,e){return(Ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Jt(t,e){return!e||"object"!==Kt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Vt(t){return(Vt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Gt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ht(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Vt(r);if(o){var n=Vt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Jt(this,t)});function i(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),a.call(this,t)}return e=i,(n=[{key:"render",value:function(){if(null==this.props.derbyTable)return React.createElement("div",{className:"derby-msg"},"Retrieving scoreboard...");var t,e=[],n=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=Wt(t))){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(this.props.derbyTable.entries());try{for(n.s();!(t=n.n()).done;){var r=Ut(t.value,2),o=r[0],a=r[1],i=a.commit.slice(0,6);e.push(React.createElement("tr",{key:a.name},React.createElement("td",null,o+1),React.createElement("td",null,a.name),React.createElement("td",null,i),React.createElement("td",null,a.score.toFixed(2),"x"),React.createElement("td",null,Math.round(a.timeUsed/1e3),"s"),React.createElement("td",null,a.inQueue?"IN QUEUE":"--")))}}catch(t){n.e(t)}finally{n.f()}return e.length>0?React.createElement("table",{className:"plain-table"},React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null,"No."),React.createElement("th",null,"Team"),React.createElement("th",null,"Commit"),React.createElement("th",null,"Score"),React.createElement("th",null,"Priority"),React.createElement("th",null,"Status"))),React.createElement("tbody",null,e)):React.createElement("div",{className:"derby-msg"},"No submissions yet!")}}])&&$t(e.prototype,n),i}(),Xt=n(379),Zt=n.n(Xt),Yt=n(169);function te(t){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ee(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ne(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function re(t,e){return(re=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function oe(t,e){return!e||"object"!==te(e)&&"function"!=typeof e?ae(t):e}function ae(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ie(t){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ce(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}Zt()(Yt.Z,{insert:"head",singleton:!1}),Yt.Z.locals;var ue="6035.krawthekrow.me",le=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&re(t,e)}(i,React.Component);var e,n,r,o,a=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ie(r);if(o){var n=ie(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return oe(this,t)});function i(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),ce(ae(e=a.call(this,t)),"handleWsOpen",(function(){e.ws.send({type:"login",token:e.token})})),ce(ae(e),"handleWsAuth",(function(t){e.setState(V((function(e){e.auth=!0,e.isAdmin=t.isAdmin,e.name=t.name,e.teamName=t.team,e.allKerbs=t.allKerbs,e.allKerbs.sort(),e.allTeams=t.allTeams,e.allTeams.sort(),e.numMiniquizzes=t.numMq,e.phase5Enabled=t.phase5})))})),ce(ae(e),"handleWsDbUpdate",(function(t){e.setState(V((function(e){var n,r=e.db[t.table],o=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return ee(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(t.rows);try{for(o.s();!(n=o.n()).done;){var a=n.value;(0==r.length||r[r.length-1].id<a.id)&&r.push(a)}}catch(t){o.e(t)}finally{o.f()}})))})),ce(ae(e),"handleWsQuizFiles",(function(t){e.setState(V((function(e){e.quizFiles=t.files})))})),ce(ae(e),"handleWsInQueue",(function(t){e.setState(V((function(e){e.testsQueueCurrent=t.current,e.testsQueuePending=t.pending})))})),ce(ae(e),"handleWsDerby",(function(t){e.setState(V((function(e){e.derbyTable=t.table})))})),ce(ae(e),"handleWsMessage",(function(t){console.log(t),{auth:e.handleWsAuth,dbUpdate:e.handleWsDbUpdate,quizFiles:e.handleWsQuizFiles,inQueue:e.handleWsInQueue,derby:e.handleWsDerby}[t.type](t)})),ce(ae(e),"handleLoginSuccess",(function(t){e.token=t,e.ws.init()})),ce(ae(e),"handleNavClick",(function(t){localStorage.setItem("navIndex",t),e.setState(V((function(e){e.navIndex=t})))}));var n=localStorage.getItem("navIndex");return null==n&&(n=1),e.state={auth:!1,isAdmin:!1,name:null,teamName:null,allKerbs:[],allTeams:[],db:{webhooks_log:[],quiz_submissions:[],test_results:[]},quizFiles:[],numMiniquizzes:null,testsQueueCurrent:null,testsQueuePending:null,navIndex:n,phase5Enabled:!1,derbyTable:null},e.token=null,e.ws=new G(ue,e.handleWsOpen,e.handleWsMessage),window.main=ae(e),e}return e=i,(n=[{key:"render",value:function(){if(!this.state.auth)return React.createElement(at,{serverDomain:ue,onLoginSuccess:this.handleLoginSuccess});var t=null==this.state.teamName?null:React.createElement("span",null,", team ",React.createElement("b",null,this.state.teamName)),e=React.createElement("span",null,"Logged in as ",React.createElement("b",null,this.state.name),t,".");return React.createElement("div",{className:"main"},React.createElement("div",{className:"loggedInMessage"},e),React.createElement("div",{className:"errorMessage"},this.state.apiError),React.createElement(mt,{navIndex:this.state.navIndex,onNavClick:this.handleNavClick,phase5Enabled:this.state.phase5Enabled}),0==this.state.navIndex?React.createElement(xt,{serverDomain:ue,allKerbs:this.state.allKerbs,quizFiles:this.state.quizFiles,numMiniquizzes:this.state.numMiniquizzes}):null,1==this.state.navIndex?React.createElement(qt,{teamName:this.state.teamName,allKerbs:this.state.allKerbs,allTeams:this.state.allTeams,testResults:this.state.db.test_results,webhooksLog:this.state.db.webhooks_log,testsQueueCurrent:this.state.testsQueueCurrent,testsQueuePending:this.state.testsQueuePending}):null,2==this.state.navIndex?React.createElement(Gt,{derbyTable:this.state.derbyTable}):null)}}])&&ne(e.prototype,n),i}(),se=document.querySelector("#mainContainer");ReactDOM.render(React.createElement(le,null),se)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,